[["index.html", "Random Forests with R The book website Preamble", " Random Forests with R The book website Robin Genuer et Jean-Michel Poggi 2023-10-04 Preamble This page contains all R code included in our book “Random Forests with R” by Robin Genuer and Jean-Michel Poggi. You can navigate directly on this page using the left bar and R scripts (R or Rmd fils per chapter) can also be downloaded here or thanks to the following links: Chapitre 1 Introduction (R, Rmd) Chapitre 2 CART (R, Rmd) Chapitre 3 Random Forests (R, Rmd) Chapitre 4 Variable importance (R, Rmd) Chapitre 5 Variable selection (R, Rmd) "],["introduction-to-random-forests-with-r.html", "1 Introduction to Random Forests with R 1.5 Data sets", " 1 Introduction to Random Forests with R 1.5 Data sets 1.5.1 Running example: spam detection data(&quot;spam&quot;, package = &quot;kernlab&quot;) set.seed(9146301) levels(spam$type) &lt;- c(&quot;ok&quot;, &quot;spam&quot;) yTable &lt;- table(spam$type) indApp &lt;- c(sample(1:yTable[2], yTable[2]/2), sample((yTable[2] + 1):nrow(spam), yTable[1]/2)) spamApp &lt;- spam[indApp, ] spamTest &lt;- spam[-indApp, ] 1.5.2 Ozone pollution data(&quot;Ozone&quot;, package = &quot;mlbench&quot;) 1.5.3 Genomic data for a vaccine study data(&quot;vac18&quot;, package = &quot;mixOmics&quot;) 1.5.4 Dust pollution data(&quot;jus&quot;, package = &quot;VSURF&quot;) "],["cart.html", "2 CART 2.4 The rpart package 2.5 Competing and surrogate splits 2.6 Examples", " 2 CART 2.4 The rpart package library(rpart) treeDef &lt;- rpart(type ~ ., data = spamApp) print(treeDef, digits = 2) plot(treeDef) text(treeDef, xpd = TRUE) set.seed(601334) treeMax &lt;- rpart(type ~ ., data = spamApp, minsplit = 2, cp = 0) plot(treeMax) treeMax$cptable plotcp(treeMax) cpOpt &lt;- treeMax$cptable[which.min(treeMax$cptable[, 4]), 1] treeOpt &lt;- prune(treeMax, cp = cpOpt) plot(treeOpt) text(treeOpt, xpd = TRUE, cex = 0.8) thres1SE &lt;- sum(treeMax$cptable[which.min(treeMax$cptable[, 4]), 4:5]) cp1SE &lt;- treeMax$cptable[min(which(treeMax$cptable[, 4] &lt;= thres1SE)), 1] tree1SE &lt;- prune(treeMax, cp = cp1SE) plot(tree1SE) text(tree1SE, xpd = TRUE, cex = 0.8) errTestTreeMax &lt;- mean(predict(treeMax, spamTest, type = &quot;class&quot;) != spamTest$type) errEmpTreeMax &lt;- mean(predict(treeMax, spamApp, type = &quot;class&quot;) != spamApp$type) 2.5 Competing and surrogate splits 2.5.2 Surrogate splits treeStump &lt;- rpart(type ~ ., data = spamApp, maxdepth = 1) summary(treeStump) 2.5.3 Interpretability par(mar = c(7, 3, 1, 1) + 0.1) barplot(treeMax$variable.importance, las = 2, cex.names = 0.8) 2.6 Examples 2.6.1 Predicting ozone concentration library(&quot;rpart&quot;) data(&quot;Ozone&quot;, package = &quot;mlbench&quot;) OzTreeDef &lt;- rpart(V4 ~ ., data = Ozone) print(OzTreeDef, digits = 3) plot(OzTreeDef) text(OzTreeDef, xpd = TRUE, cex = 0.9) set.seed(727325) OzTreeMax &lt;- rpart(V4 ~ ., data = Ozone, minsplit = 2, cp = 0) plotcp(OzTreeMax) OzIndcpOpt &lt;- which.min(OzTreeMax$cptable[, 4]) OzcpOpt &lt;- OzTreeMax$cptable[OzIndcpOpt, 1] OzTreeOpt &lt;- prune(OzTreeMax, cp = OzcpOpt) plot(OzTreeOpt) text(OzTreeOpt, xpd = TRUE) 2.6.2 Analyzing genomic data library(rpart) data(&quot;vac18&quot;, package = &quot;mixOmics&quot;) VAC18 &lt;- data.frame(vac18$genes, stimu = vac18$stimulation) VacTreeDef &lt;- rpart(stimu ~ ., data = VAC18) print(VacTreeDef) plot(VacTreeDef) text(VacTreeDef, use.n = TRUE, xpd = TRUE) set.seed(788182) VacTreeMax &lt;- rpart(stimu ~ ., data = VAC18, minsplit = 2, cp = 0) plot(VacTreeMax) text(VacTreeMax, use.n = TRUE, xpd = TRUE) set.seed(413745) VacTreeMaxLoo &lt;- rpart(stimu ~ ., data = VAC18, minsplit = 2, cp = 0, xval = nrow(VAC18)) par(mfrow = c(1, 2)) plotcp(VacTreeMax) plotcp(VacTreeMaxLoo) VacIndcpOpt &lt;- which.min(VacTreeMaxLoo$cptable[, 4]) VaccpOpt &lt;- VacTreeMaxLoo$cptable[VacIndcpOpt, 1] VacTreeOpt &lt;- prune(VacTreeMaxLoo, cp = VaccpOpt) plot(VacTreeOpt) text(VacTreeOpt, use.n = TRUE, xpd = TRUE) "],["random-forests.html", "3 Random Forests 3.1 General principle 3.3 The randomForest package 3.5 Parameters setting for prediction 3.6 Examples", " 3 Random Forests 3.1 General principle 3.1.1 Instability of a tree set.seed(368910) spamBoot1 &lt;- spamApp[sample(1:nrow(spamApp), nrow(spamApp), replace = TRUE), ] treeBoot1 &lt;- rpart(type ~ ., data = spamBoot1) plot(treeBoot1) text(treeBoot1, xpd = TRUE) set.seed(368915) spamBoot2 &lt;- spamApp[sample(1:nrow(spamApp), nrow(spamApp), replace = TRUE), ] treeBoot2 &lt;- rpart(type ~ ., data = spamBoot2) plot(treeBoot2) text(treeBoot2, xpd = TRUE) mean(predict(treeBoot1, spamTest, type = &quot;class&quot;) != predict(treeBoot2, spamTest, type = &quot;class&quot;)) 3.1.2 From a tree to an ensemble: the Bagging library(randomForest) bagging &lt;- randomForest(type ~ ., data = spamApp, mtry = ncol(spamApp) - 1) bagging errTestBagging &lt;- mean(predict(bagging, spamTest) != spamTest$type) errEmpBagging &lt;- mean(predict(bagging, spamApp) != spamApp$type) 3.3 The randomForest package RFDef &lt;- randomForest(type ~ ., data = spamApp) RFDef RFDef &lt;- randomForest(spamApp[, -58], spamApp[, 58]) errTestRFDef &lt;- mean(predict(RFDef, spamTest) != spamTest$type) errEmpRFDef &lt;- mean(predict(RFDef, spamApp) != spamApp$type) 3.5 Parameters setting for prediction 3.5.1 The number of trees: ntree plot(RFDef) RFDoTrace &lt;- randomForest(type ~ ., data = spamApp, ntree = 250, do.trace = 25) 3.5.2 The number of variables chosen at each node: mtry nbvars &lt;- 1:(ncol(spamApp) - 1) oobsMtry &lt;- sapply(nbvars, function(nbv) { RF &lt;- randomForest(type ~ ., spamApp, ntree = 250, mtry = nbv) return(RF$err.rate[RF$ntree, &quot;OOB&quot;]) }) mean(replicate(n = 25, randomForest(type ~ ., spamApp, ntree = 250)$err.rate[250, &quot;OOB&quot;])) bagStump &lt;- randomForest(type ~ ., spamApp, ntree = 100, mtry = ncol(spamApp) - 1, maxnodes = 2) bagStumpbestvar &lt;- table(bagStump$forest$bestvar[1, ]) names(bagStumpbestvar) &lt;- colnames(spamApp)[as.numeric(names(bagStumpbestvar))] sort(bagStumpbestvar, decreasing = TRUE) RFStump &lt;- randomForest(type ~ ., spamApp, ntree = 100, maxnodes = 2) RFStumpbestvar &lt;- table(RFStump$forest$bestvar[1, ]) names(RFStumpbestvar) &lt;- colnames(spamApp)[as.numeric(names(RFStumpbestvar))] sort(RFStumpbestvar, decreasing = TRUE) 3.6 Examples 3.6.1 Predicting ozone concentration library(&quot;randomForest&quot;) data(&quot;Ozone&quot;, package = &quot;mlbench&quot;) OzRFDef &lt;- randomForest(V4 ~ ., Ozone, na.action = na.omit) OzRFDef plot(OzRFDef) plot(nbvars, oobsMtrys, type = &quot;l&quot;, xlab = &quot;mtry&quot;, ylab = &quot;Erreur OOB&quot;) bins &lt;- c(0, 10, 20, 40) V4bin &lt;- cut(Ozone$V4, bins, include.lowest = TRUE, right = FALSE) OzoneBin &lt;- data.frame(Ozone, V4bin) OzRFDefStrat &lt;- randomForest(V4 ~ . - V9 - V4bin, OzoneBin, strata = V4bin, sampsize = 200, na.action = na.omit) OzRFDefStrat 3.6.2 Analyzing genomic data library(randomForest) data(&quot;vac18&quot;, package = &quot;mixOmics&quot;) geneExpr &lt;- vac18$genes stimu &lt;- vac18$stimulation VacRFpsur3 &lt;- randomForest(x = geneExpr, y = stimu, mtry = ncol(geneExpr)/3) VacRFpsur3 plot(VacRFpsur3) nFor &lt;- 25 VacOOBsqrtp &lt;- replicate(nFor, randomForest(geneExpr, stimu)$err.rate[500, &quot;OOB&quot;]) VacOOBpsur3 &lt;- replicate(nFor, randomForest(geneExpr, stimu, mtry = ncol(geneExpr)/3)$err.rate[500, &quot;OOB&quot;]) 3.6.3 Analyzing dust pollution library(randomForest) data(&quot;jus&quot;, package = &quot;VSURF&quot;) jusComp &lt;- na.omit(jus) jusRF &lt;- randomForest(PM10 ~ ., data = jusComp) partialPlot(jusRF, pred.data = jusComp, x.var = &quot;NO&quot;, main = &quot;Effet marginal - NO&quot;) "],["variable-importance.html", "4 Variable importance 4.1 Notions of importance 4.3 Tree diversity and importance 4.5 Examples", " 4 Variable importance 4.1 Notions of importance RFDefImp &lt;- randomForest(type ~ ., data = spamApp, importance = TRUE) varImpPlot(RFDefImp, type = 1, scale = FALSE, n.var = ncol(spamApp) - 1, cex = 0.8, main = &quot;Importance des variables&quot;) 4.3 Tree diversity and importance bagStumpImp &lt;- randomForest(type ~ ., spamApp, mtry = ncol(spamApp) - 1, maxnodes = 2, importance = TRUE) varImpPlot(bagStumpImp, type = 1, scale = FALSE, n.var = 20, cex = 0.8, main = &quot;Importance des variables&quot;) RFStumpImp &lt;- randomForest(type ~ ., spamApp, maxnodes = 2, importance = TRUE) varImpPlot(RFStumpImp, type = 1, scale = FALSE, n.var = 20, cex = 0.8, main = &quot;Importance des variables&quot;) 4.5 Examples 4.5.1 An illustration by simulation in regression library(mlbench) fried1Simu &lt;- mlbench.friedman1(n = 500) fried1Data &lt;- data.frame(fried1Simu$x, y = fried1Simu$y) fried1RFimp &lt;- randomForest(y ~ ., fried1Data, importance = TRUE) varImpPlot(fried1RFimp, type = 1, scale = FALSE, main = &quot;Importance des variables&quot;) partialPlot(fried1RFimp, fried1Data, x.var = &quot;X1&quot;, main = &quot;X1&quot;) 4.5.2 Predicting ozone concentration library(&quot;randomForest&quot;) data(&quot;Ozone&quot;, package = &quot;mlbench&quot;) OzRFDefImp &lt;- randomForest(V4 ~ ., Ozone, na.action = na.omit, importance = TRUE) varImpPlot(OzRFDefImp, type = 1, scale = FALSE, main = &quot;Importance des variables&quot;) 4.5.3 Analyzing genomic data library(randomForest) data(&quot;vac18&quot;, package = &quot;mixOmics&quot;) geneExpr &lt;- vac18$genes stimu &lt;- vac18$stimulation vacRFDefImp &lt;- randomForest(x = geneExpr, y = stimu, mtry = ncol(geneExpr)/3, importance = TRUE) varImpPlot(vacRFDefImp, type = 1, scale = FALSE, cex = 0.8) vacImp &lt;- vacRFDefImp$importance[, nlevels(stimu) + 1] plot(sort(vacImp, decreasing = TRUE), type = &quot;l&quot;, xlab = &quot;Variables&quot;, ylab = &quot;Importance des variables&quot;) "],["variable-selection.html", "5 Variable selection 5.4 The VSURF package 5.5 Parameters setting for selection 5.6 Examples", " 5 Variable selection 5.4 The VSURF package library(VSURF) data(&quot;toys&quot;) set.seed(3101318) vsurfToys &lt;- VSURF(toys$x, toys$y, mtry = 100) summary(vsurfToys) plot(vsurfToys) set.seed(3101318) vsurfThresToys &lt;- VSURF_thres(toys$x, toys$y, mtry = 100) vsurfThresToys$varselect.thres plot(vsurfToys, step = &quot;thres&quot;, imp.mean = FALSE, ylim = c(0, 2e-04)) vsurfInterpToys &lt;- VSURF_interp(toys$x, toys$y, vars = vsurfThresToys$varselect.thres) vsurfInterpToys$varselect.interp vsurfPredToys &lt;- VSURF_pred(toys$x, toys$y, err.interp = vsurfInterpToys$err.interp, varselect.interp = vsurfInterpToys$varselect.interp) vsurfPredToys$varselect.pred set.seed(923321, kind = &quot;L&#39;Ecuyer-CMRG&quot;) vsurfSpam &lt;- VSURF(type ~ ., spamApp, parallel = TRUE, ncores = 3, clusterType = &quot;FORK&quot;) summary(vsurfSpam) plot(vsurfSpam) colnames(spamApp[vsurfSpam$varselect.interp]) colnames(spamApp[vsurfSpam$varselect.pred]) vsurfSpam$mean.jump set.seed(945834) vsurfSpamPred &lt;- VSURF_pred(type ~ ., spamApp, nmj = 15, err.interp = vsurfSpam$err.interp, varselect.interp = vsurfSpam$varselect.interp) colnames(spamApp[vsurfSpamPred$varselect.pred]) 5.5 Parameters setting for selection vsurfToysStump &lt;- VSURF(toys$x, toys$y, mtry = 100, maxnodes = 2) summary(vsurfToysStump) vsurfToysStump$varselect.interp vsurfToysStump$varselect.pred vsurfThresToysTuned &lt;- tune(vsurfThresToys, nmin = 3) vsurfThresToysTuned$varselect.thres vsurfInterpToysTuned &lt;- tune(vsurfInterpToys, nsd = 5) vsurfInterpToysTuned$varselect.interp vsurfPredToysTuned &lt;- VSURF_pred(toys$x, toys$y, err.interp = vsurfInterpToys$err.interp, varselect.interp = vsurfInterpToys$varselect.interp, nmj = 3) vsurfPredToysTuned$varselect.pred 5.6 Examples 5.6.1 Predicting ozone concentration library(VSURF) data(&quot;Ozone&quot;, package = &quot;mlbench&quot;) set.seed(303601) OzVSURF &lt;- VSURF(V4 ~ ., data = Ozone, na.action = na.omit) summary(OzVSURF) plot(OzVSURF, var.names = TRUE) number &lt;- c(1:3, 5:13) number[OzVSURF$varselect.thres] number[OzVSURF$varselect.interp] number[OzVSURF$varselect.pred] 5.6.2 Analyzing genomic data library(VSURF) data(&quot;vac18&quot;, package = &quot;mixOmics&quot;) geneExpr &lt;- vac18$genes stimu &lt;- vac18$stimulation set.seed(481933) vacVSURF &lt;- VSURF(x = geneExpr, y = stimu) summary(vacVSURF) plot(vacVSURF) probeSelPred &lt;- colnames(geneExpr)[vacVSURF$varselect.pred] probeSelPred set.seed(627408, kind = &quot;L&#39;Ecuyer-CMRG&quot;) vacVSURFpara &lt;- VSURF(x = geneExpr, y = stimu, parallel = TRUE, ncores = 3, clusterType = &quot;FORK&quot;) summary(vacVSURFpara) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
